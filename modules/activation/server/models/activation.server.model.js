"use strict";

module.exports = function (sequelize, DataTypes) {

    var Activation = sequelize.define('activation', {
        id: {
            primaryKey: true,
            type: DataTypes.UUID,
            defaultValue: DataTypes.UUIDV4
        },
        version: {
            type: DataTypes.STRING,
            allowNull: false,
            comment: 'Value specifying version of product last downloaded by installer'
        },
        login: {
            type: DataTypes.STRING,
            allowNull: false,
            comment: 'Value entered by user as a credential or email'
        },
        content: {
            type: DataTypes.TEXT,
            allowNull: false,
            comment: 'Value generated by installer from users machine properties'
        },
        chosenMethod: {
            type: DataTypes.INTEGER,
            references: {
                model: "paymethods",
                key: "id"
            },
            comment: 'Identifier of last method chosen by user to pay for activation, or NULL if non chosen'
        },
        isClosed: {
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: false,
            comment: 'Flag is set by admin panel when this activation must not provide any responses other than from admin panel'
        },
        isStarted: {
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: false,
            comment: 'Flag is set when user select one of the payment methods, or unset if user never chose a method'
        },
        isPaid: {
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: false,
            comment: 'Flag is set when payment callback is received by server, or unset if calback was never received'
        },
        isConfirmed: {
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: false,
            comment: 'Flag is set when installer requested a payment confirmation on a paid activation, or unset if such condition was never met'
        },
        isCompiled: {
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: false,
            comment: 'Flag is set when activation file is available for download by installer, or unset if no such file exists'
        },
        isDone: {
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: false,
            comment: 'Flag is set when installer sends a success message, or unset if no such file exists'
        }
    }, {
        timestamps: true,
        associate: function (models) {
            Activation.belongsTo(models.product);
            Activation.belongsToMany(models.paymethod, {
                as: 'methods',
                through: models.activationpaymethod
            });
        }
    });

    return Activation;
};

